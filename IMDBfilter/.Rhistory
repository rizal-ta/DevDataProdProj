confusionMatrix(p4,testing$diagnosis)$overall
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testin
testing <- concrete[-inTrain,]
set.seed(3523)
library(e1071)
f <- train(CompressiveStrength ~ ., method = "svm", data = training)
f <- svm(CompressiveStrength ~ ., data = training)
f
predict(f,testing)
p <- predict(f,testing)
confusionMatrix(p,testing$CompressiveStrength)
f <- svm(CompressiveStrength ~ ., data = training)
p <- predict(f,testing)
confusionMatrix(p,testing$CompressiveStrength)
testing$CompressiveStrength
str(testing)
p[1]
as.numeric(p)
confusionMatrix(as.numeric(p),testing$CompressiveStrength)
install.packages("forecast")
library(forecast)
accuracy(p, testing$CompressiveStrength)
q()
library(shiny)
install.packages("shiny")
library(shiny)
runApp('gg')
runApp('gg')
runApp('gg')
q()
library(leaflet)
mm <- leaflet() %<%
addTiles()
mm <- leaflet() %>%
addTiles() %>%
addMarkers(lat = 9.958,lng = 76.259)
mm
tourist.spots <- data.frame(name = "mattancherry", lat = 9.958, lng = 76.259)
mymap <- leaflet() %>%
leaflet() %>%
addTiles() %>%
addMarkers(tourist.spots)
View(tourist.spots)
mymap <- leaflet() %>%
leaflet() %>%
addTiles() %>%
addMarkers(tourist.spots[,-1])
mymap <- tourist.spots %>%
leaflet() %>%
leaflet() %>%
addTiles() %>%
addMarkers()
mymap <- tourist.spots %>%
leaflet() %>%
addTiles() %>%
addMarkers()
mymap <- tourist.spots[-1] %>%
leaflet() %>%
addTiles() %>%
addMarkers()
mymap
tourist.links <- data.frame(name = "mp")
mymap <- tourist.spots[-1] %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = tourist.links)
mymap
tourist.spots <- data.frame(lat = 9.958, lng = 76.259)
tourist.links <- data.frame(names = "mp")
mymap <- tourist.spots[-1] %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = tourist.links)
mymap
tourist.spots <- data.frame(lat = 9.958, lng = 76.259)
tourist.links <- data.frame(names = "mp")
mymap <- tourist.spots %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = tourist.links)
mymap
tourist.spots <- data.frame(lat = 9.958, lng = 76.259)
tourist.links <- data.frame(popup = "mp")
mymap <- tourist.spots %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = tourist.links)
mymap
tourist.spots <- data.frame(lat = 9.958, lng = 76.259)
tourist.links <- data.frame(popup = "mp")
mymap <- tourist.spots %>%
leaflet() %>%
addTiles() %>%
addMarkers() %>%
addPopups(tourist.links)
mymap
mymap <- tourist.spots %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = "mp") %>%
mymap
mymap <- tourist.spots %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = "mp") %>%
mymap
mymap <- tourist.spots %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = "mp")
mymap
tourist.spots <- data.frame(lat = c(9.958, 9.957222), lng = c(76.259, 76.259444))
tourist.spots <- data.frame(lat = c(9.958, 9.957222, 9.968, 9.965),
lng = c(76.259, 76.259444, 76.244, 76.243))
tourist.links <- c("<a href='https://en.wikipedia.org/wiki/Mattancherry_Palace'>Mattancherry Palace</a>",
"<a href='https://en.wikipedia.org/wiki/Paradesi_Synagogue'>Paradesi Synagogue</a>",
"<a href='https://en.wikipedia.org/wiki/Fort_Kochi_Beach'>Fort Kochi Beach</a>",
"<a href='https://en.wikipedia.org/wiki/Santa_Cruz_Cathedral_Basilica,_Kochi'>Santa Cruz Cathredal Basilica</a>",)
tourist.spots <- leaflet() %>%
addTiles() %>%
addMarkers(popup = "mp")
tourist.spots <- data.frame(lat = c(9.958, 9.957222, 9.968, 9.965),
lng = c(76.259, 76.259444, 76.244, 76.243))
tourist.links <- c("<a href='https://en.wikipedia.org/wiki/Mattancherry_Palace'>Mattancherry Palace</a>",
"<a href='https://en.wikipedia.org/wiki/Paradesi_Synagogue'>Paradesi Synagogue</a>",
"<a href='https://en.wikipedia.org/wiki/Fort_Kochi_Beach'>Fort Kochi Beach</a>",
"<a href='https://en.wikipedia.org/wiki/Santa_Cruz_Cathedral_Basilica,_Kochi'>Santa Cruz Cathredal Basilica</a>",)
tourist.spots <- leaflet() %>%
addTiles() %>%
addMarkers()
tourist.spots <- data.frame(lat = c(9.958, 9.957222, 9.968, 9.965),
lng = c(76.259, 76.259444, 76.244, 76.243))
tourist.links <- c("<a href='https://en.wikipedia.org/wiki/Mattancherry_Palace'>Mattancherry Palace</a>",
"<a href='https://en.wikipedia.org/wiki/Paradesi_Synagogue'>Paradesi Synagogue</a>",
"<a href='https://en.wikipedia.org/wiki/Fort_Kochi_Beach'>Fort Kochi Beach</a>",
"<a href='https://en.wikipedia.org/wiki/Santa_Cruz_Cathedral_Basilica,_Kochi'>Santa Cruz Cathredal Basilica</a>",)
tourist.spots %>%
leaflet() %>%
addTiles() %>%
addMarkers()
tourist.spots %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = tourist.links)
View(tourist.links)
tourist.spots <- data.frame(lat = c(9.958, 9.957222, 9.968, 9.965),
lng = c(76.259, 76.259444, 76.244, 76.243))
tourist.links <- c("<a href='https://en.wikipedia.org/wiki/Mattancherry_Palace'>Mattancherry Palace</a>",
"<a href='https://en.wikipedia.org/wiki/Paradesi_Synagogue'>Paradesi Synagogue</a>",
"<a href='https://en.wikipedia.org/wiki/Fort_Kochi_Beach'>Fort Kochi Beach</a>",
"<a href='https://en.wikipedia.org/wiki/Santa_Cruz_Cathedral_Basilica,_Kochi'>Santa Cruz Cathredal Basilica</a>")
tourist.spots %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = tourist.links)
q()
install.packages("slidify")
install.packages("slidify")
install.packages("plotly")
library(plotly)
plot_ly(type = "geo")
plot_ly(type = 'choropleth',locationmode = 'india-states')
plot_ly(type = 'choropleth',locationmode = 'india')
plot_ly(type = 'choropleth',locationmode = 'USA')
plot_ly(type = 'choropleth',locationmode = 'USA-states')
plot_ly(type = 'choropleth',locationmode = 'india-states')
layout(geo = map_options)
map_options <- list(
scope = 'india',
projection = list(type = 'albers india')
)
layout(geo = map_options)
plot_ly(type = 'choropleth',locationmode = 'india-states') %>%
layout(geo = map_options)
plot_ly(type = 'choropleth',locationmode = 'india-states') %>%
layout(geo = map_options)
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa')
)
plot_ly(type = 'choropleth',locationmode = 'USA-states') %>%
layout(geo = map_options)
plot_ly(type = 'choropleth',locationmode = 'INDIA-states') %>%
layout(geo = list(scope = 'india'))
layout(geo = list(scope = 'IN'))
plot_ly(type = 'choropleth',locationmode = 'INDIA-states') %>%
layout(geo = list(scope = 'IN'))
plot_ly(type = 'choropleth',locationmode = 'india') %>%
layout(geo = list(scope = 'india'))
plot_ly(type = 'choropleth',locationmode = 'usa') %>%
layout(geo = list(scope = 'usa'))
aa <- read.csv('messi.csv')
View(aa)
aa <- read.csv('messi.csv')
library(plotly)
plot_ly(aa, Season, Gls)
plot_ly(aa, Season ~ Gls)
plot_ly(aa, x  = Season, y = Gls)
plot_ly(data = aa, x  = Season, y = Gls)
plot_ly(x  = aa$Season, y = aa$Gls)
plot_ly(x  = aa$Season, y = aa$Gls, type = 'markers')
plot_ly(x  = aa$Season, y = aa$Gls, type = 'scatter')
plot_ly(x  = aa$Season, y = aa$Gls, mode = 'marker')
plot_ly(x  = aa$Season, y = aa$Gls, type = 'scatter', mode = 'marker')
plot_ly(aa, x  = Season, y = Gls, type = 'scatter', mode = 'marker')
plot_ly(data = aa, x  = Season, y = Gls, type = 'scatter', mode = 'marker')
data(aa)
data("mtcars")
mtcars
plot_ly(mtcars, wt, mpg)
plot_ly(mtcars, x = wt, y = mpg, type = 'scatter')
plot_ly(data = aa, x  = ~Season, y = ~Gls, type = 'scatter', mode = 'marker')
plot_ly(data = aa, x  = ~as.factor(Season), y = ~Gls, type = 'scatter', mode = 'marker')
plot_ly(data = aa, x  = ~Season, y = ~Gls, type = 'scatter', mode = 'marker')
plot_ly(data = aa, x  = ~Season, y = ~Gls, type = 'scatter')
plot_ly(data = aa, x  = ~Season, y = ~Gls, type = 'scatter', mode = 'markers + text')
plot_ly(data = aa, x  = ~Season, y = ~Gls, type = 'scatter', mode = 'text')
plot_ly(data = aa, x  = ~Season, y = ~Gls, type = 'scatter', mode = 'line')
plot_ly(data = aa, x  = ~Season, y = ~Gls, type = 'scatter', mode = 'markers')
plot_ly(data = aa, x  = ~Season, y = ~Gls, type = 'scatter', mode = 'markers', text = '')
plot_ly(data = aa, x  = ~Season, y = ~Gls, type = 'scatter', mode = 'markers', hovertext = '')
plot_ly(data = aa, x  = ~Season, y = ~Gls, type = 'scatter', mode = 'markers', hovertext = 'Goals')
plot_ly(data = aa, x  = ~Season, y = ~Gls, type = 'scatter', mode = 'markers', hovertext = ~paste('Goals', Gls))
plot_ly(data = aa, x  = ~Season, y = ~Gls, type = 'scatter', mode = 'markers', hovertext = ~paste('Goals', Gls), hoverinfo = 'text' )
plot_ly(data = aa, x  = ~Season, y = ~c(Gls, Ast), type = 'bar' )
plot_ly(data = aa, x  = ~Season, y = ~Gls, type = 'bar' )
plot_ly(data = aa, x  = ~Season, y = ~data.frame(Gls,Ast) type = 'bar')
plot_ly(data = aa, x  = ~Season, y = ~data.frame(Gls,Ast) ,type = 'bar')
aa <- select(aa, Season, Gls, Ast)
names(aa) <- c('Season','Goals','Assists')
library(reshape2)
mm <- melt(aa)
View(mm)
plot_ly(mm, ~Season, ~value, color = ~variable, type = 'bar')
plot_ly(mm, ~Season, ~value, fill = ~variable, type = 'bar')
plot_ly(mm, ~Season, ~value, fill = ~variable)
plot_ly(mm, ~Season, ~value, fill = ~variable, type = 'scatter', method  = 'marker')
plot_ly(mm, ~Season, ~value, color = ~variable, type = 'scatter', method  = 'marker')
plot_ly(mm, x = ~Season,y = ~value, color = ~variable, type = 'scatter', method  = 'marker')
plot_ly(mm, x = ~Season,y = ~value, color = ~variable, type = 'scatter', mode = 'marker')
plot_ly(mm, x = ~Season,y = ~value, colors = ~variable, type = 'scatter', mode = 'marker')
plot_ly(mm, x = ~Season,y = ~value, type = 'bar', mode = 'marker')
plot_ly(mm, x = ~Season,y = ~value, type = 'bar')
plot_ly(mm, x = ~Season,y = ~value, type = 'bar', mode = 'dodge')
plot_ly(mm, x = ~Season,y = ~value, color = ~variable type = 'bar')
plot_ly(mm, x = ~Season,y = ~value, color = ~variable, type = 'bar')
plot_ly(mm, x = ~Season,y = ~value, color = ~variable, type = 'bar', mode = 'stack')
plot_ly(mm, x = ~Season,y = ~value, color = ~variable, type = 'bar', barmode =  'stack')
plot_ly(aa, ~Season, ~Goals, type = 'bar')
plot_ly(aa, x = ~Season, y = ~Goals, type = 'bar')
p<-plot_ly(aa, x = ~Season, y = ~Goals, type = 'bar')
p<-p  %>%
add_trace(y = ~ Assists)
p
p<-plot_ly(aa, x = ~Season, y = ~Goals, name = Goals, type = 'bar')
p<-plot_ly(aa, x = ~Season, y = ~Goals, name = 'Goals', type = 'bar')
p<-p  %>%
add_trace(y = ~ Assists, name = 'Assists') %>%
layout(yaxix = list(title = 'G+A'), barmode = 'stacked')
p
p<-plot_ly(aa, x = ~Season, y = ~Goals, name = Goals, type = 'bar')
p<-plot_ly(aa, x = ~Season, y = ~Goals, name = 'Goals', type = 'bar')
p<-p  %>%
add_trace(y = ~ Assists, name = 'Assists') %>%
layout(yaxix = list(title = 'G+A'), barmode = 'stack')
p
knitr::opts_chunk$set(echo = FALSE)
dat <- read.csv("messi.csv")
## Loading neccessary libraries
library(plotly)
dat <- read.csv("messi.csv")
View(aa)
write.csv(aa, file = "messi.csv")
## Loading neccessary libraries
library(plotly)
dat <- read.csv("messi.csv")
## Loading neccessary libraries
library(plotly)
dat <- read.csv("messi.csv")
dat
p <- plot_ly(dat, x = ~Season, y = ~Goals, name = "Goals")
p <- p%>%
add_trace(y = ~Assists, name = "Assists") %>%
layout(yaxis = list(title = "G+A"), barmode = "stack")
p
p <- plot_ly(dat, x = ~Season, y = ~Goals, name = "Goals", type = "bar")
p <- p%>%
add_trace(y = ~Assists, name = "Assists", ) %>%
layout(yaxis = list(title = "G+A"), barmode = "stack")
p <- plot_ly(dat, x = ~Season, y = ~Goals, name = "Goals", type = "bar")
p <- p%>%
add_trace(y = ~Assists, name = "Assists") %>%
layout(yaxis = list(title = "G+A"), barmode = "stack")
p
mm <- read.csv("top500mangaMAL.csv")
View(mm)
mm <- read.csv("top500mangaMAL.csv", na.strings = "Unknown")
colSums(is.na(mm))
unique(mm$Type)
mm[mm$Type == "Manhwa",]$English.Title
mm[mm$Type == "Manhua",]$English.Title
mm[mm$Type == "Manhua",]$Synonims.Titles
strsplit(mm$Synonims.Titles[2])
strsplit(mm$Synonims.Titles[2], ",")
is.na(mm$English.Title)
is.na(mm$English.Title) & is.na(mm$Synonims.Titles)
mm[is.na(mm$English.Title) & is.na(mm$Synonims.Titles),]
nn <- mm[is.na(mm$English.Title) & is.na(mm$Synonims.Titles),]
View(nn)
View(mm)
length(unique(mm$Genres))
genre <- mm$Genres
genre
genre <- gsub("[","",genre)
genre <- gsub("\\[","",genre)
genre
genre <- gsub("\\]","",genre)
genre
grep(genre, slice, value = TRUE)
grep(genre, 'slice', value = TRUE)
grep('slice',genre, value = TRUE)
grep('Slice',genre, value = TRUE)
grep('\\'Slice\\', \\'Slice\\'',genre, value = TRUE)
grep("'Slice', 'Slice'",genre, value = TRUE)
genre1 <- gsub("'Slice', 'Slice'", "'Slice of Life'",genre, value = TRUE)
genre1 <- gsub("'Slice', 'Slice'", "'Slice of Life'",genre)
genre1
genre <- genre1
rm(genre)
genre <- genre1
rm(genre1)
genre <- gsub("'Sci', 'Sci'", "'Sci-fi'",genre)
genre
x <- strsplit(genre, split = ",")
x
x[[33]]
genre
gsub(", ",",",genre)
genre <- gsub(", ",",",genre)
x <- strsplit(genre, split = ",")
x
genre <- gsub("'","",genre)
genre
x <- strsplit(genre, split = ",")
x
d <- x[[488]]
d
unique(x)
c(x[[1]],x[[2]])
unique(c(x[[1]],x[[2]]))
c(x)
unlist(x)
unique(unlist(x))
genre <- gsub("Super","Super Power",genre)
genre <- gsub("Gender","Gender Bender",genre)
x <- strsplit(genre, split = ",")
unique(unlist(x))
url <- mm$Manga.URL
url
url <- gsub("https://myanimelist.net/manga/","",url)
url
url <- strsplit(url, "/")
url
url[[]]
url[2]
as.data.frame(url)
url[1:length(url)]
url[1:length(url),2]
url[1:length(url)][2]
url[[1:length(url)]][2]
url[1:length(url)]
url[[1:length(url)]]
url[1:length(url)][2]
url[c(1:length(url),2)]
url[c(1:length(url),2)]
data.frame(rnorm(100),nrow = 50)
data.frame(rnorm(100))
data.frame(url)
data.frame(rnorm(100), nrow = 50)
data.frame(rnorm(100), rnorm(100))
url
matrix(unlist(url))
matrix(unlist(url), nrow = length(url))
matrix(unlist(url), nrow = length(url), byrow = TRUE)
url <- matrix(unlist(url), nrow = length(url), byrow = TRUE)
url[,2]
names <- url[,2]
url
names
names <- gsub("_"," ",names)
names
mm
library(dplyr)
View(mm)
genre
mm <- select(mm, -c(3,4,5))
mm <- read.csv("top500mangaMAL.csv", na.strings = "Unknown")
mm$English.Title <- names
mm <- select(mm, -c(4,5))
filter(mm, Status = "On Hiatus")
filter(mm, Status == "On Hiatus")
mm$Genres <- genre
plot(mm$Ranked,mm$Popularity)
abs(mm$Ranked - mm$Popularity)
abs(mm$Ranked - mm$Popularity) < 10
mm[abs(mm$Ranked - mm$Popularity) < 10,3]
devtools::install_github("statsbomb/StatsBombR")
library(StatsBombR)
comp <- FreeCompetitions()
comp
View(comp)
unzip("~/Downloads/archive (1).zip")
library(shiny)
setwd("~/Course/CO2Emission")
dat <- read.csv("co2_emission.csv")
View(dat)
unique(dat$Entity)
setwd("~/Course/")
unzip("netflix_titles.csv.zip")
setwd("~/Course/NetflixSearch")
netflixData <- read.csv("netflix_titles.csv")
View(netflixData)
setwd("~/Course")
manga <- read.csv("top500mangaMAL.csv")
View(manga)
q()
setwd("~/Course/IMDBsearch")
shiny::runApp()
install.packages("shinyWidgets")
library(shinyWidgets)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat[dat$Country == "",]
nrow(dat[dat$Country == "",])
noc <- dat[dat$Country == "",]
View(noc)
noc <- mutate(noc, ID = paste0("https://www.imdb.com/title/", ID))
noc <- mutate(noc, ID = paste0('<a href="', ID, '">', Movie, '</a>'))
runApp()
runApp()
runApp()
runApp()
gg <- read.csv("data/data.csv")
rm(gg)
runApp()
runApp()
View(dat)
runApp()
runApp()
View(dat)
runApp()
dat
aa<- arrange(dat ,  desc(Rating))
aa
View(aa)
runApp()
range(dat$Votes)
runApp()
runApp()
runApp()
orig <- read.csv('~/Course/IMDb movies.csv')
orig
dat$Movie  <- orig$original_title
View(noc)
View(dat)
write.csv(dat, "data.csv", row.names = FALSE)
runApp()
runApp()
runApp()
runApp()
dat <- mutate(dat, ID = paste0("https://www.imdb.com/title/", ID))
dat <- mutate(dat, ID = paste0('<a href="', ID, '">', Movie, '</a>'))
dat <- mutate(dat, Movie = ID)
dat <- select(dat, ID)
View(aa)
dat <- read.csv('~/Course/IMDBsearch/data.csv')
View(dat)
dat <- mutate(dat, ID = paste0("https://www.imdb.com/title/", ID))
dat <- mutate(dat, ID = paste0('<a href="', ID, '">', Movie, '</a>'))
dat <- mutate(dat, Movie = ID)
dat <- select(dat, -ID)
runApp()
View(dat)
dat <- mutate(dat, ID = paste0("https://www.imdb.com/title/", ID))
dat <- mutate(dat, ID = paste0('<a href="', ID, '">', Movie, '</a>'))
dat <- mutate(dat, Movie = ID)
dat <- select(dat, -ID)
nn <- dat
runApp()
runApp()
write.csv(nn, '~/Course/IMDBsearch/data/data.csv')
write.csv(nn, '~/Course/IMDBsearch/data/data.csv', row.names = FALSE)
runApp()
dat <- read.csv('data.csv')
View(dat)
dat$Movie <- orig$original_title
dat <- mutate(dat, ID = paste0("https://www.imdb.com/title/", ID))
dat <- mutate(dat, ID = paste0('<a href="', ID, '">', Movie, '</a>'))
dat <- mutate(dat, Movie = ID)
dat <- select(dat, -ID)
write.csv(dat, '~/Course/IMDBsearch/data/data.csv', row.names = FALSE)
runApp()
q()
